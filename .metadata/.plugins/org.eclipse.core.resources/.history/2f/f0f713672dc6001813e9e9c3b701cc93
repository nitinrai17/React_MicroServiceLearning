package com.learning.rest.webservices.restfulwebservices.user;

import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;

import java.net.URI;
import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.Resource;
import org.springframework.hateoas.mvc.ControllerLinkBuilder;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

@RestController
public class UserJPSResource {
	
		
	@Autowired
	private UserRepository userRepository;
	
	//GET  /users
	//retrieveAllUsers
	
	@GetMapping("/jpa/users")
	public List<User> retrieveAllUsers(){
		return userRepository.findAll();
	}
	
	//GET /user/{id}
	@GetMapping("/jpa/users/{id}")
	public Resource<User> retrieveUser(@PathVariable int id ) {
		Optional<User> user = userRepository.findById(id);
		
		if(!user.isPresent()) throw new UserNotFoundExcpetion("id "+ id );
		
		Resource<User> resource = new Resource<User>(user.get());
		ControllerLinkBuilder linkTo= linkTo(methodOn(this.getClass()).retrieveAllUsers());
		resource.add(linkTo.withRel("all-users"));
		
		return resource;
	}
	
	//POST
	//CREATED
	//input -  details of user
	//output -  CREATED and Return the created URI
	@PostMapping("/jpa/users")
	public ResponseEntity<Object> createUser(@Valid @RequestBody User user) {
		User saveUser = userRepository.save(user);
		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(saveUser.getId()).toUri(); 
		return ResponseEntity.created(location).build();
		
	}
	
	//DELETE /user/{id}
		@DeleteMapping("/jpa/users/{id}")
		public void deleteUser(@PathVariable int id ) {
			userRepository.deleteById(id);
					
		}
		
		@GetMapping("/jpa/users/{id}/posts")
		public List<User> retrieveAllUsers(@PathVariable int id){
			 Optional<User> userOptional = userRepository.findById(id);
			 
			 if(!userOptional.isPresent()) {
				 throw new UserNotFoundExcpetion("id - "+id );
			 }
		}
	

}
